{"componentChunkName":"component---src-components-post-tsx","path":"/blog/2021/2021-03-13-its-about-the technique/","result":{"data":{"mdx":{"slug":"2021/2021-03-13-its-about-the-technique/","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"It's about the technique\",\n  \"date\": \"2021-03-13T00:00:00.000Z\",\n  \"published\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"I have always been a big advocate of \\u201Cprogramming languages\\u201D don\\u2019t really matter, but I do admit that there are definitely languages that are easier to learn and use than others. Python, for example, is now appearing in the curriculum of many introductory computer science classes, because it is one of the programming languages most \\u201Csimilar\\u201D to plain English. In Python, there is not that many funny braces or other syntaxes when compared to languages like C and C++.\\nFor learning concepts in computer science, I think that programming languages do not really matter, since the fundamental idea is pretty similar across various languages and there are mostly syntactical differences. Now, that being said, I don\\u2019t think this means that computer science courses should focus only on one language because it does not really matter which programming language people use. Rather, the different classes should try to expose students as many different kinds of languages in the first place and help the students see the significant features and differences of each language. In my opinion, the most important skill/lesson that students should be taking away from any computer science curriculum is the ability to adapt quickly to changes.\"), mdx(\"p\", null, \"If only refactoring various pieces of software into different languages was simple and effortless, then the choice of programming language in software development wouldn\\u2019t really matter. Unfortunately, there are only a limited number of software developers and only so much time that could be spent on improving the software. Old software that was written in COBOL, for example, still exist today because industries do not want to sacrifice the time and effort required to create the same software in a different language. It is only inevitable that people will find easier, more reliable, and more convenient way to do things, and coding is not an exception. As hardware improves, people\\u2019s mode of thinking will shift. In the older days, people had to worry about resources constraints such as processing power, memory, and storage space when coding, but those limitations are much less of a concern now. My point is: programming languages will continue to evolve, and I believe that industries should be more willing to redevelop their programs every era or so. Realistically, however, most companies, when building new software, seem to realize that it is easiest to find and hire programmers who use the most popular languages such as Java and Python.\"), mdx(\"p\", null, \"I think, however, that the choice of programming languages is much more important when building niche applications. Any data science, machine-learning programs, for example, will benefit from the plethora of Python libraries or R. Engineering software and programs would find it really easy to visualize various stress points on a structure using MATLAB. Honestly, I feel that I don\\u2019t know too much about the different types of programming languages to determine if we are lacking in some specific aspect of programming. Yet, I do know that currently languages are being developed by people who actually will be using the programming languages, so I have hope for the future that languages will have adapted to the appropriate hardware and mindset of that era.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"It's about the technique","date":"March 13th, 2021"}}},"pageContext":{"slug":"/2021/2021-03-13-its-about-the technique/"}},"staticQueryHashes":["1518425861","2744905544"]}